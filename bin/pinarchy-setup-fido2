#!/bin/bash

set -e

# FIDO2 Management Script for PinArchy  
# Enhanced FIDO2/YubiKey configuration with multiple options

echo "üîê PinArchy FIDO2 Management"
echo

check_fido2_hardware() {
  local tokens=$(fido2-token -L 2>/dev/null)
  if [ -z "$tokens" ]; then
    echo "‚ùå No FIDO2 device detected. Please plug it in (you may need to unlock it as well)."
    return 1
  fi
  echo "‚úÖ FIDO2 device detected:"
  echo "$tokens"
  return 0
}

# Define available FIDO2 components
COMPONENTS=(
  "login-sudo"
  "ssh"
  "luks"
)

# Use gum for consistent multi-select interface
SELECTED_STRING=$(gum choose --no-limit --header "Select FIDO2 components to configure..." --selected-prefix="‚úó " "${COMPONENTS[@]}")

# Convert newline-separated string to array
SELECTED=()
while IFS= read -r line; do
  [[ -n "$line" ]] && SELECTED+=("$line")
done <<< "$SELECTED_STRING"

if [[ ${#SELECTED[@]} -eq 0 ]]; then
  echo "No components selected. Exiting."
  exit 0
fi

echo
echo "Authentication options:"

# Separate checkboxes for authentication requirements
OPTIONS_STRING=$(gum choose --no-limit --header "Select authentication requirements..." --selected-prefix="‚úì " "touch-required" "pin-required")

# Convert options to array
OPTIONS=()
while IFS= read -r line; do
  [[ -n "$line" ]] && OPTIONS+=("$line")
done <<< "$OPTIONS_STRING"

echo
echo "Selected components:"
for component in "${SELECTED[@]}"; do
  case "$component" in
    "login-sudo") echo "  üîê login-sudo - System authentication (login + sudo + GUI admin)" ;;
    "ssh") echo "  üîë ssh - Hardware-backed SSH keys" ;;
    "luks") echo "  üíæ luks - Disk encryption with FIDO2" ;;
  esac
done

echo
echo "Authentication requirements:"
for option in "${OPTIONS[@]}"; do
  case "$option" in
    "touch-required") echo "  üëÜ touch-required - Physical touch needed for authentication" ;;
    "pin-required") echo "  üî¢ pin-required - PIN entry required for authentication" ;;
  esac
done

if [[ ${#OPTIONS[@]} -eq 0 ]]; then
  echo "  ‚ö° No additional requirements - Presence-only authentication"
fi

echo

# Check for FIDO2 hardware before proceeding
if ! check_fido2_hardware; then
  exit 1
fi

echo

# Process login-sudo component if selected
if [[ " ${SELECTED[@]} " =~ " login-sudo " ]]; then
  echo "üîê Processing login-sudo authentication..."
  
  # Determine authfile based on selected authentication options
  determine_authfile() {
    local touch_required=false
    local pin_required=false
    
    # Check selected options
    for option in "${OPTIONS[@]}"; do
      case "$option" in
        "touch-required") touch_required=true ;;
        "pin-required") pin_required=true ;;
      esac
    done
    
    # Map options to authfile paths
    if [[ "$touch_required" == true && "$pin_required" == true ]]; then
      echo "/etc/fido2/touch-pin-required"
    elif [[ "$touch_required" == true ]]; then
      echo "/etc/fido2/touch-required"
    elif [[ "$pin_required" == true ]]; then
      echo "/etc/fido2/pin-required"
    else
      echo "/etc/fido2/no-touch"
    fi
  }
  
  AUTHFILE=$(determine_authfile)
  echo "üìÇ Target authfile: $AUTHFILE"
  
  # Register FIDO2 key
  echo
  echo "üîë Registering FIDO2 key..."
  echo "Touch your FIDO2 device when it lights up..."
  
  
  # Perform registration with hostname-based origin/appid
  if pamu2fcfg -o pam://$HOST -i pam://$HOST | sudo tee -a "$AUTHFILE" >/dev/null; then
    echo "‚úÖ FIDO2 key registered successfully to $AUTHFILE"
    
    # Ask user if they want to test sudo authentication
    echo
    if gum confirm "Would you like to test sudo authentication with your FIDO2 key?"; then
      echo "üß™ Testing FIDO2 authentication with sudo..."
      echo "Touch your FIDO2 key when prompted..."
      echo
      
      if sudo echo "FIDO2 authentication test successful"; then
        echo "üéâ Perfect! FIDO2 authentication is working correctly."
      else
        echo "‚ö†Ô∏è  Test failed. You may want to check your configuration."
      fi
    else
      echo "‚ÑπÔ∏è  Skipped authentication test. Your FIDO2 key is registered and ready to use."
    fi
  else
    echo "‚ùå FIDO2 key registration failed. Please try again."
    exit 1
  fi
fi